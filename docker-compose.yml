version: '3.8'

services:
  # 後端API服務
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: proxy-collector-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///data/proxy_collector.db
      - MONITORING_ENABLED=true
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - proxy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL數據庫
  postgres:
    image: postgres:15-alpine
    container_name: proxy-collector-postgres
    environment:
      - POSTGRES_DB=proxy_collector
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - proxy-network
    restart: unless-stopped

  # Redis緩存
  redis:
    image: redis:7-alpine
    container_name: proxy-collector-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - proxy-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Prometheus監控
  prometheus:
    image: prom/prometheus:latest
    container_name: proxy-collector-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - proxy-network
    restart: unless-stopped

  # Grafana儀表板
  grafana:
    image: grafana/grafana:latest
    container_name: proxy-collector-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - proxy-network
    restart: unless-stopped

  # 前端React應用
  frontend:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: proxy-collector-frontend
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - proxy-network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: proxy-collector-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - proxy-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  proxy-network:
    driver: bridge